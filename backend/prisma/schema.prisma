// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  senha String
  telefone String
  rankID Int
  cargo Rank @relation(fields: [rankID],references: [id])
  pedidos Pedido[]
}
model Rank{
  id Int @id @default(autoincrement())
  name String
  users User[]
}
enum TypeRegister {
  FISICA
  JURIDICA
}
enum  TypeOrder {
  COMPRA
  VENDA
}
enum TypeStatus {
  ABERTO
  FECHADO
  PAGO
}
enum TypeMovimentacao {
  ENTRADA
  SAIDA
}
enum CategoriaMovimentacao {
  PEDIDO
  ABASTECIMENTO
  RETIRADA
  DESPESA
}

model Register{
  id Int @id @default(autoincrement())
  nome_razao String 
  cpf_cnpj String
  ie String? //inscrição estadual
  apelido String //nome fantasia
  tipo TypeRegister @default(FISICA)
  tabelaID Int
  tabela Tabela @relation(fields: [tabelaID],references: [id])
  dados_pagamento PaymentData?
  pedidos Pedido[]
  email String?
  endereco Endereco?
  telefone String? // n:n
  criadoEm DateTime @default(now())
  editadoEm DateTime @updatedAt @default(now())
  Saldo SaldoFinanceiro[]
  
}
model SaldoFinanceiro{
  id Int @id @default(autoincrement())
  registerID Int @unique
  Register Register @relation(fields: [registerID],references: [id])
}
model Endereco{
  id Int @id @default(autoincrement())
  registerID Int @unique
  register Register @relation(fields: [registerID],references: [id])
  estado String?
  cidade String?
  bairro String
  logradouro String
  numero String
  complemento String?
}

model PaymentData {
  id Int @id @default(autoincrement())
  banco String
  agencia Int
  conta Int
  chave String
  cpf String
  registerID Int @unique
  register Register @relation(fields: [registerID],references: [id]) 
  
}

model Tabela {
  id Int @id @default(autoincrement())
  nome String @unique
  materiais TabelasMateriais[]
  Register Register[]
}
model TabelasMateriais {
  id Int @id @default(autoincrement())
  v_compra Decimal
  materialID Int
  material Material @relation(fields: [materialID],references: [id])
  tabela Tabela @relation(fields: [tabelaID],references: [id])
  tabelaID Int
  
}
model Material {
  id Int @id @default(autoincrement())
  nome String
  groupID Int 
  group CategoriaMaterial @relation(fields: [groupID],references: [id])
  v_compra Decimal 
  v_venda Decimal
  tabelas_materiais TabelasMateriais[]
  criadoEm DateTime @default(now())
  editadoEm DateTime @updatedAt @default(now())
  estoque Decimal
}
model CategoriaMaterial {
  id Int @id @default(autoincrement())
  name String
  materiais Material[]
}

model Pedido{
  id Int @id @default(autoincrement())
  registerID Int
  register Register @relation(fields: [registerID],references: [id])
  tipo TypeOrder
  totalValue Decimal @default(0)
  status TypeStatus
  userID Int
  items ItemPedido[]
  user User @relation(fields: [userID],references: [id])
  pagamento Movimentacao[]
  criadoEm DateTime @default(now())
  
}
model ItemPedido {
  id Int @id @default(autoincrement())
  pedidoID Int
  pedido Pedido @relation(fields: [pedidoID], references: [id])
  materialID Int
  preco Decimal
  quantidade Decimal
  tara Decimal
  impureza Decimal
  
}

model Caixa {
  id Int @id @default(autoincrement())
  nome String
  valor Decimal
  
  movimentacoes Movimentacao[]
}

model Movimentacao{
  id Int @id @default(autoincrement())
  tipo TypeMovimentacao
  data DateTime @default(now())
  categoria CategoriaMovimentacao
  descricao String?
  value Decimal
  caixaID Int
  caixa Caixa @relation(fields: [caixaID],references: [id])

  pedidoID Int?
  pedido Pedido? @relation(fields: [pedidoID],references: [id])
  parcela Int?
  totalParcelas Int?

}